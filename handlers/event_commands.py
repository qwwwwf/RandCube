import string
import random
import asyncio
from keyboards import *
from aiogram import Router
from database import Event
from bots_starting import bot_tg
from dotenv import load_dotenv
from misc.states import GetData
from aiogram.utils.markdown import hlink
from aiogram.fsm.context import FSMContext
from misc.functions import generate_winner
from aiogram.methods import AnswerCallbackQuery
from aiogram.types import CallbackQuery, Message


load_dotenv()
router = Router()


# <--------------- / BACK TO EVENTS / --------------->
@router.callback_query(lambda callback: callback.data == 'back_to_events')
async def back_to_events(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        text='<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> üèÜ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è\n\n'
             '<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> —Ç—É—Ç –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –ø–æ—Å—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –ª–∏–±–æ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ'
             '–≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –≤ —Å–∞–º–æ–º –±–æ—Ç–µ! ü•á',
        reply_markup=keyboard_events
    )


# <--------------- / VK EVENTS / --------------->
@router.callback_query(lambda callback: callback.data == 'get_winner_vk')
async def get_winner_vk(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GetData.post_url)
    await callback.message.edit_text(
        '‚≠ê <b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</b>\n\n'
        '‚ÑπÔ∏è –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –±—ã—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π –≥—Ä—É–ø–ø–µ',
        reply_markup=keyboard_back_to_events
    )

    await asyncio.sleep(0.25)
    await AnswerCallbackQuery(callback_query_id=callback.id)


@router.message(GetData.post_url)
async def gwk_state_post_url(message: Message, state: FSMContext):
    response = await generate_winner(message.text)
    await state.clear()

    if len(response) != 0:
        await message.answer(
            f'üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å - <b>{response["username"]}!</b>\n'
            f'üë§ –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É - {response["user_url"]}'
        )
    else:
        await message.answer(
            '‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è</b>\n\n'
            '‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç, –ª–∏–±–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ',
            reply_markup=keyboard_back_to_events
        )


# <--------------- / BOT EVENTS / --------------->.
@router.callback_query(lambda callback: callback.data == 'enter_in_event')
async def enter_in_event(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GetData.event_key)
    await callback.message.edit_text(
        'üîë <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ</b>',
        reply_markup=keyboard_back_to_events
    )

    await asyncio.sleep(0.25)
    await AnswerCallbackQuery(callback_query_id=callback.id)


@router.message(GetData.event_key)
async def event_state_enter_key(message: Message, state: FSMContext):
    await state.clear()

    if await Event(message.chat.id).add_user_into_event(message.text) is True:
        await message.answer(
            '‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ</b>\n\n'
            '‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n<i>–ê–∫–∫–∞—É–Ω—Ç ‚Üí –ú–æ–∏ —É—á–∞—Å—Ç–∏—è</i>'
        )
    else:
        await message.answer(
            '‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É—á–∞—Å—Ç–∏—è</b>\n\n'
            '‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –ª–∏–±–æ –µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
            reply_markup=keyboard_back_to_events
        )


@router.callback_query(lambda callback: callback.data == 'account_my_event')
async def account_my_event(callback: CallbackQuery):
    data = await Event(callback.message.chat.id).get_user_event()

    if len(data) != 0:
        await callback.message.edit_text(
            f'üîë <b>–ö–æ–¥ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b> <code>{data["secret_id"]}</code>\n'
            f'üîó <b>–°—Å—ã–ª–∫–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b> t.me/RandomizerCube_bot?start={data["secret_id"]}\n\n'
            f'üèÜ <b>–ü—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç:</b> {data["prizes_count"]}\n'
            f'üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {len(data["members"])}/{data["members_count"]}\n\n'
            f'üìú <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{data["description"]}</i>',
            reply_markup=keyboard_event_settings
        )
    else:
        await callback.message.edit_text(
            '–£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞',
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text='‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data='create_event')
                    ],
                    [
                        InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_to_account')
                    ]
                ]
            )
        )


@router.callback_query(lambda callback: callback.data == 'cancel_event')
async def cancel_event(callback: CallbackQuery):
    await callback.message.edit_text(
        '‚ùå <b>–†–æ–∑—ã–≥—Ä—ã—à –æ—Ç–º–µ–Ω–µ–Ω</b>',
        reply_markup=keyboard_back_to_account
    )

    secret_id = (await Event(callback.message.chat.id).get_user_event())['secret_id']
    await Event(callback.message.chat.id).cancel_event(secret_id)
    event_members = await Event(callback.message.chat.id).get_event_members(secret_id)

    for member_id in event_members:
        await bot_tg.send_message(
            chat_id=member_id,
            text=f'‚ùå <b>–†–æ–∑—ã–≥—Ä—ã—à <code>{secret_id}</code> –æ—Ç–º–µ–Ω–µ–Ω</b>'
        )


@router.callback_query(lambda callback: callback.data == 'create_event')
async def create_event(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GetData.event_creation)
    await callback.message.edit_text(
        '‚öôÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n</b>'
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 1 100 (1 –ø—Ä–∏–∑–æ–≤–æ–µ –º–µ—Å—Ç–æ, 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)',
        reply_markup=keyboard_back_to_account
    )


@router.message(GetData.event_creation)
async def event_state_creation(message: Message, state: FSMContext):
    await state.clear()
    split_message = message.text.split()

    if len(split_message) == 2:
        try:
            if int(split_message[0]) >= 1 and int(split_message[1]) >= 2:
                if int(split_message[0]) <= int(split_message[1]):
                    new_secret_id = ''.join([random.choice(string.ascii_letters + string.digits) for _ in range(8)])
                    await Event(message.chat.id)\
                        .create_event(new_secret_id, int(split_message[0]), int(split_message[1]))

                    await message.reply(
                        '‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –Ω–µ–º –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç–µ',
                        reply_markup=keyboard_close
                    )
                else:
                    await message.reply('‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É '
                                        '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
            else:
                await message.reply('‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 1, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '
                                    '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1')
        except:
            await message.reply('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞')
    else:
        await message.reply('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å 2 —á–∏—Å–ª–∞')


@router.callback_query(lambda callback: callback.data == 'edit_event_description')
async def edit_event_description(callback: CallbackQuery, state: FSMContext):
    await state.set_state(GetData.edit_event_description)
    await callback.message.edit_text(
        '‚öôÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 200 —Å–∏–º–≤–æ–ª–æ–≤</b>',
        reply_markup=keyboard_back_to_account
    )


@router.message(GetData.edit_event_description)
async def event_state_creation(message: Message, state: FSMContext):
    await state.clear()

    secret_id = (await Event(message.chat.id).get_user_event())['secret_id']

    if len(message.text) <= 200:
        await Event(message.chat.id).update_event_description(secret_id, message.text)
        await message.reply(
            '‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞',
            reply_markup=keyboard_close
        )
    else:
        await message.reply('‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: <b>200</b>')


@router.callback_query(lambda callback: callback.data == 'account_events')
async def account_events(callback: CallbackQuery):
    data = await Event(callback.message.chat.id).get_users_events()

    text = '<i>—Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π</i>'
    if len(data) != 0:
        user_events = []

        for event in data:
            user_events.append(
                f'üîë <b>–ö–æ–¥:</b> <code>{event[1]}</code>\n'
                f'üìú <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{event[6]}</i>'
            )

        text = '\n‚ûñ\n\n'.join(user_events)

    await callback.message.edit_text(
        f'üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ —Å –í–∞—à–∏–º —É—á–∞—Å—Ç–∏–µ–º:\n\n</b>{text}',
        reply_markup=keyboard_back_to_account
    )


@router.callback_query(lambda callback: callback.data == 'get_event_winner')
async def get_event_winner(callback: CallbackQuery):
    data = await Event(callback.message.chat.id).get_user_event()

    if len(data) != 0:
        if len(data['members']) != 0:
            if data['prizes_count'] >= len(data['members']):
                winners = random.choices(data['members'], k=len(data['members']))
            else:
                winners = random.choices(data['members'], k=data['prizes_count'])

            text = 'üéä <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n</b>' +\
                   '\n'.join([f'<b>{i + 1}.</b> {hlink((await bot_tg.get_chat(winners[i])).first_name, f"tg://user?id={winners[i]}")}'
                              for i in range(len(winners))])

            for member_id in data['members']:
                place_in_the_top = ''
                if member_id in winners:
                    place_in_the_top = f'üèÜ –í—ã –∑–∞–Ω—è–ª–∏ <b>#{winners.index(member_id) + 1}</b> –º–µ—Å—Ç–æ\n'

                await bot_tg.send_message(
                    chat_id=member_id,
                    text=f'üéâ <b>–†–æ–∑—ã–≥—Ä—ã—à <code>{data["secret_id"]}</code> –∑–∞–≤–µ—Ä—à–∏–ª—Å—è!</b>\n'
                         f'{place_in_the_top}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<b>–ò—Ç–æ–≥–∏</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n{text}'
                )

            await callback.message.edit_text(
                text,
                reply_markup=keyboard_close
            )

            await Event(callback.message.chat.id).cancel_event(data['secret_id'])
            await Event(callback.message.chat.id).update_event_winners(data['secret_id'], winners)
        else:
            await AnswerCallbackQuery(
                callback_query_id=callback.id,
                show_alert=True,
                text=f'‚ö†Ô∏è –í —Ä–æ–∑—ã–≥—Ä—ã—à–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
            )
    else:
        await callback.message.delete()
