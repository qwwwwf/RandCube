import string
import random
import asyncio
from keyboards import *
from database import User
from aiogram import Router
from aiogram.fsm.context import FSMContext
from misc.states import ChangeParams, GetData
from aiogram.methods import AnswerCallbackQuery
from aiogram.types import CallbackQuery, Message
from misc.functions import get_random_string, generate_fact


min_password_size = int(config['Values']['min_password_size'])
max_password_size = int(config['Values']['max_password_size'])
min_value_generation_value = int(config['Values']['min_value_generation_value'])
max_value_generation_value = int(config['Values']['max_value_generation_value'])


with open('handlers/stickers_ids_playingcards.txt', 'r', encoding='utf-8') as file:
    stickers_ids_playingcards = file.read().splitlines()


with open('handlers/stickers_ids_8ball.txt', 'r', encoding='utf-8') as file:
    stickers_ids_8ball = file.read().splitlines()


router = Router()


@router.callback_query(lambda callback: callback.data == 'back_to_generation_commands')
async def category_generation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        text=f'<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è\n\n'
             f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–µ–π! üòâ',
        reply_markup=keyboard_generation
    )


# <--------------- / DICE / --------------->
@router.callback_query(lambda callback: callback.data == 'dice')
async def dice(callback: CallbackQuery):
    result = await callback.message.answer_dice('üé≤')

    await callback.message.answer(f'–í—ã–ø–∞–ª–æ: <b>{result.dice.value}</b>')

    await asyncio.sleep(0.4)
    await AnswerCallbackQuery(callback_query_id=callback.id)


# <--------------- / COINFLIP / --------------->
@router.callback_query(lambda callback: callback.data == 'coinflip')
async def coinflip(callback: CallbackQuery):
    result = random.choice(['–æ—Ä—ë–ª', '—Ä–µ—à–∫–∞'])
    await callback.message.answer('ü™ô')
    await callback.message.answer(f'–í—ã–ø–∞–ª <b>{result}</b>' if result == '–æ—Ä—ë–ª' else f'–í—ã–ø–∞–ª–∞ <b>{result}</b>')

    await asyncio.sleep(0.4)
    await AnswerCallbackQuery(callback_query_id=callback.id)


# <--------------- / RANDOM PLAYING CARD / --------------->
@router.callback_query(lambda callback: callback.data == 'random_playing_card')
async def random_playing_card(callback: CallbackQuery):
    stickers = stickers_ids_playingcards

    await callback.message.answer_sticker(sticker=random.choice(stickers))

    await asyncio.sleep(0.25)
    await AnswerCallbackQuery(callback_query_id=callback.id)


# <--------------- / RANDOM TICKET / --------------->
@router.callback_query(lambda callback: callback.data == 'random_ticket')
async def random_ticket(callback: CallbackQuery):
    ticket_number = random.randint(000000, 999999)

    result = '—É–¥–∞—á–Ω—ã–º! üçÄ' if sum(map(int, list(str(ticket_number)[:3]))) == sum(
        map(int, list(str(ticket_number)[3:]))) else '–Ω–µ—É–¥–∞—á–Ω—ã–º!'

    await callback.message.edit_text(
        f'üé´ –í–∞—à –±–∏–ª–µ—Ç: <b>{ticket_number}</b>\n–û–∫–∞–∑–∞–ª—Å—è <b>{result}</b>',
        reply_markup=keyboard_back_to_gen_commands
    )

    await asyncio.sleep(0.25)
    await AnswerCallbackQuery(callback_query_id=callback.id)


# <--------------- / 8BALL / --------------->
@router.callback_query(lambda callback: callback.data == '8ball')
async def random_magic_ball(callback: CallbackQuery):
    stickers = stickers_ids_8ball

    await callback.message.answer_sticker(sticker=random.choice(stickers))

    await asyncio.sleep(0.25)
    await AnswerCallbackQuery(callback_query_id=callback.id)


# <--------------- / RANDOM FACT / --------------->
@router.callback_query(lambda callback: callback.data == 'random_fact')
async def random_fact(callback: CallbackQuery):
    if await User(callback.message.chat.id).user_is_allow_see_facts() is True:
        await callback.message.edit_text(
            f'üîÆ <b>–§–∞–∫—Ç:</b>\n\n{await generate_fact()}',
            reply_markup=keyboard_back_to_gen_commands
        )

        await asyncio.sleep(0.25)
        await AnswerCallbackQuery(callback_query_id=callback.id)
    else:
        await AnswerCallbackQuery(
            callback_query_id=callback.id,
            show_alert=True,
            text='‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–∫—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è\n\n'
                 '–£ –≤–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ–∫–∞–∑ —Ñ–∞–∫—Ç–æ–≤, –µ–≥–æ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n'
                 'üë§ –ê–∫–∫–∞—É–Ω—Ç ‚Üí ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'
        )


# <--------------- RANDOM NUMBER --------------->
@router.callback_query(lambda callback: callback.data == 'random_number')
async def random_number(callback: CallbackQuery):
    last_data = await User(callback.message.chat.id).get_last_generation_number()

    await callback.message.edit_text(
        'üî¢ <b>–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ</b>\n\n'
        f'üîÅ –ö–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: <b>{last_data["generation_count"]}</b>\n'
        f'üìè –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç <b>{last_data["min_value"]}</b> –¥–æ <b>{last_data["max_value"]}</b>',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='-', callback_data='minus_generation_number_counter'),
                    InlineKeyboardButton(text=last_data["generation_count"],
                                         callback_data='change_generation_number_counter'),
                    InlineKeyboardButton(text='+', callback_data='plus_generation_number_counter')
                ],
                [
                    InlineKeyboardButton(text='üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data='generate_number')
                ],
                [
                    InlineKeyboardButton(text='‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω', callback_data='change_generate_number_params')
                ],
                [
                    InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_to_generation_commands')
                ]
            ]
        )
    )

    await asyncio.sleep(0.25)
    await AnswerCallbackQuery(callback_query_id=callback.id)


@router.callback_query(lambda callback: callback.data == 'generate_number')
async def generate_number(callback: CallbackQuery):
    last_data = await User(callback.message.chat.id).get_last_generation_number()

    result = []
    for _ in range(last_data['generation_count']):
        result.append(str(random.randint(last_data['min_value'], last_data['max_value'])))

    await callback.message.edit_text(
        ';  '.join(result),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='random_number')
                ]
            ]
        )
    )

    await asyncio.sleep(0.25)
    await AnswerCallbackQuery(callback_query_id=callback.id)


@router.callback_query(lambda callback: callback.data == 'minus_generation_number_counter')
async def minus_generation_number_counter(callback: CallbackQuery):
    last_data = await User(callback.message.chat.id).get_last_generation_number()

    if last_data['generation_count'] > min_value_generation_value:
        last_data['generation_count'] -= 1
        await User(callback.message.chat.id).update_generation_number_params(last_data)
        await random_number(callback)
    else:
        await AnswerCallbackQuery(
            callback_query_id=callback.id,
            show_alert=True,
            text=f'‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {min_value_generation_value}'
        )


@router.callback_query(lambda callback: callback.data == 'plus_generation_number_counter')
async def plus_generation_number_counter(callback: CallbackQuery):
    last_data = await User(callback.message.chat.id).get_last_generation_number()

    if last_data['generation_count'] <= max_value_generation_value:
        last_data['generation_count'] += 1
        await User(callback.message.chat.id).update_generation_number_params(last_data)
        await random_number(callback)
    else:
        await AnswerCallbackQuery(
            callback_query_id=callback.id,
            show_alert=True,
            text=f'‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {max_value_generation_value}'
        )


@router.callback_query(lambda callback: callback.data == 'change_generation_number_counter')
async def change_generation_number_counter(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        f'‚öôÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (–æ—Ç {min_value_generation_value} –¥–æ {max_value_generation_value})</b>',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_to_gen_command_number')
                ]
            ]
        )
    )
    await state.set_state(ChangeParams.generation_count_number)


@router.message(ChangeParams.generation_count_number)
async def change_params_generation_number_count(message: Message, state: FSMContext):
    await state.clear()
    if message.text.isnumeric():
        if min_value_generation_value <= int(message.text) <= max_value_generation_value:
            last_data = await User(message.chat.id).get_last_generation_number()

            last_data['generation_count'] = int(message.text)

            await User(message.chat.id).update_generation_number_params(last_data)
            await message.reply(
                f'‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π <b>{int(message.text)}</b> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                reply_markup=keyboard_close
            )
        else:
            await message.reply(f'‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {min_value_generation_value}, '
                                f'–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max_value_generation_value}')
    else:
        await message.reply('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')


@router.callback_query(lambda callback: callback.data == 'change_generate_number_params')
async def change_generate_number_params(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        '‚öôÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–æ–∑–æ–Ω —á–∏—Å–µ–ª\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1 100 (–æ—Ç 1 –¥–æ 100)</b>',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_to_gen_command_number')
                ]
            ]
        )
    )
    await state.set_state(ChangeParams.allowable_values)


@router.message(ChangeParams.allowable_values)
async def change_params_generation_values(message: Message, state: FSMContext):
    await state.clear()
    split_message = message.text.split()

    if len(split_message) == 2:
        try:
            if int(split_message[0]) and int(split_message[1]):
                if int(split_message[0]) < int(split_message[1]):
                    last_data = await User(message.chat.id).get_last_generation_number()

                    last_data['min_value'] = int(split_message[0])
                    last_data['max_value'] = int(split_message[1])

                    await User(message.chat.id).update_generation_number_params(last_data)
                    await message.reply(
                        f'‚úÖ –î–∏–∞–ø–æ–∑–æ–Ω —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: '
                        f'–æ—Ç <b>{int(split_message[0])}</b> –¥–æ <b>{int(split_message[1])}</b>',
                        reply_markup=keyboard_close
                    )
                else:
                    await message.reply('‚ö†Ô∏è –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ')
        except:
            await message.reply('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞')
    else:
        await message.reply('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å 2 —á–∏—Å–ª–∞ (<b>–æ—Ç</b> –∏ <b>–¥–æ</b>)\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b> 1 100')


# <--------------- / RANDOM PASSWORD / --------------->
@router.callback_query(lambda callback: callback.data == 'random_password')
async def random_password(callback: CallbackQuery):
    last_data = await User(callback.message.chat.id).get_last_generation_password()

    await callback.message.edit_text(
        'üîë <b>–°–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>\n\n'
        f'üîÅ –ö–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: <b>{last_data["generation_count"]}</b>\n'
        f'üìè –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: <b>{last_data["password_size"]}</b>\n'
        f'üî£ –°–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã: <b>{last_data["has_punctuation"]}</b>'
        .replace('True', '–≤–∫–ª.').replace('False', '–≤—ã–∫–ª.'),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='-', callback_data='minus_generation_password_counter'),
                    InlineKeyboardButton(text=last_data["generation_count"],
                                         callback_data='change_generation_password_counter'),
                    InlineKeyboardButton(text='+', callback_data='plus_generation_password_counter')
                ],
                [
                    InlineKeyboardButton(text='üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å', callback_data='generate_password')
                ],
                [
                    InlineKeyboardButton(
                        text=f'–°–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã: {last_data["has_punctuation"]}'
                        .replace('True', '‚úÖ')
                        .replace('False', '‚ùå'),
                        callback_data='change_param_punctuation')
                ],
                [
                    InlineKeyboardButton(text='‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è', callback_data='change_param_password_size')
                ],
                [
                    InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_to_generation_commands')
                ]
            ]
        )
    )

    await asyncio.sleep(0.25)
    await AnswerCallbackQuery(callback_query_id=callback.id)


@router.callback_query(lambda callback: callback.data == 'generate_password')
async def generate_password(callback: CallbackQuery):
    last_data = await User(callback.message.chat.id).get_last_generation_password()

    punctuation = ''

    if last_data['has_punctuation']:
        punctuation = string.punctuation

    result = []
    for _ in range(last_data['generation_count']):
        result.append(
            ''.join([random.choice(string.ascii_letters + string.digits + punctuation)
                     for _ in range(last_data['password_size'])])
        )

    await callback.message.edit_text(
        '\n‚ûñ\n'.join(result),
        parse_mode=None,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='random_password')
                ]
            ]
        )
    )

    await asyncio.sleep(0.25)
    await AnswerCallbackQuery(callback_query_id=callback.id)


@router.callback_query(lambda callback: callback.data == 'change_param_punctuation')
async def change_param_punctuation(callback: CallbackQuery):
    last_data = await User(callback.message.chat.id).get_last_generation_password()

    if last_data['has_punctuation'] is True:
        text = '–í—ã –≤—ã–∫–ª—é—á–∏–ª–∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã'
        last_data['has_punctuation'] = False
    else:
        text = '–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã'
        last_data['has_punctuation'] = True

    await User(callback.message.chat.id).update_generation_password_params(last_data)

    await AnswerCallbackQuery(
        callback_query_id=callback.id,
        show_alert=True,
        text=text
    )

    await random_password(callback)


@router.callback_query(lambda callback: callback.data == 'minus_generation_password_counter')
async def minus_generation_password_counter(callback: CallbackQuery):
    last_data = await User(callback.message.chat.id).get_last_generation_password()

    if last_data['generation_count'] > min_value_generation_value:
        last_data['generation_count'] -= 1
        await User(callback.message.chat.id).update_generation_password_params(last_data)
        await random_password(callback)
    else:
        await AnswerCallbackQuery(
            callback_query_id=callback.id,
            show_alert=True,
            text=f'‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {min_value_generation_value}'
        )


@router.callback_query(lambda callback: callback.data == 'plus_generation_password_counter')
async def plus_generation_password_counter(callback: CallbackQuery):
    last_data = await User(callback.message.chat.id).get_last_generation_password()

    if last_data['generation_count'] <= max_value_generation_value:
        last_data['generation_count'] += 1
        await User(callback.message.chat.id).update_generation_password_params(last_data)
        await random_password(callback)
    else:
        await AnswerCallbackQuery(
            callback_query_id=callback.id,
            show_alert=True,
            text=f'‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {max_value_generation_value}'
        )


@router.callback_query(lambda callback: callback.data == 'change_generation_password_counter')
async def change_generation_password_counter(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        f'‚öôÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π (–æ—Ç {min_value_generation_value} –¥–æ {max_value_generation_value})</b>',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_to_gen_command_password')
                ]
            ]
        )
    )
    await state.set_state(ChangeParams.generation_count_password)


@router.message(ChangeParams.generation_count_password)
async def change_params_generation_password_count(message: Message, state: FSMContext):
    await state.clear()
    if message.text.isnumeric():
        if min_value_generation_value <= int(message.text) <= max_value_generation_value:
            last_data = await User(message.chat.id).get_last_generation_password()

            last_data['generation_count'] = int(message.text)

            await User(message.chat.id).update_generation_password_params(last_data)
            await message.reply(
                f'‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π <b>{int(message.text)}</b> —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                reply_markup=keyboard_close
            )
        else:
            await message.reply(f'‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {min_value_generation_value}, '
                                f'–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max_value_generation_value}')
    else:
        await message.reply('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')


@router.callback_query(lambda callback: callback.data == 'change_param_password_size')
async def change_param_password_size(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        f'‚öôÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–æ—Ç {min_password_size} –¥–æ {max_password_size})</b>',
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='back_to_gen_command_password')
                ]
            ]
        )
    )
    await state.set_state(ChangeParams.change_password_size)


@router.message(ChangeParams.change_password_size)
async def change_params_generation_password_size(message: Message, state: FSMContext):
    await state.clear()
    if message.text.isnumeric():
        if min_password_size <= int(message.text) <= max_password_size:
            last_data = await User(message.chat.id).get_last_generation_password()

            last_data['password_size'] = int(message.text)

            await User(message.chat.id).update_generation_password_params(last_data)
            await message.reply(
                f'‚úÖ –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: <b>{int(message.text)}</b>',
                reply_markup=keyboard_close
            )
        else:
            await message.reply(f'‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è: <b>{min_password_size}</b>, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: '
                                f'<b>{max_password_size}</b>')
    else:
        await message.reply('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')


# <--------------- / RANDOM NUMBER & PASSWORD / --------------->
@router.callback_query(lambda callback: callback.data.startswith('back_to_gen_command'))
async def back_to_gen_command(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    if callback.data.split('_')[-1] == 'number':
        await random_number(callback)
    else:
        await random_password(callback)


# <--------------- / RANDOM STRING / --------------->
@router.callback_query(lambda callback: callback.data == 'random_string')
async def random_string(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        'üìÉ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª:</b>',
        reply_markup=keyboard_back_to_gen_commands
    )

    await state.set_state(GetData.get_file)


@router.message(GetData.get_file)
async def get_file_from_user(message: Message, state: FSMContext):
    await state.clear()
    try:
        if message.document.file_name[-3:] == 'txt':
            result = await get_random_string(message.document.file_id)
            await message.answer(f'üìú <b>–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–ø–∏—Å—å:</b>\n{result}')
        else:
            await message.reply('<b>‚ùå –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å .txt —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º</b>')
    except AttributeError:
        await message.reply('<b>‚ùå –í–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Ñ–∞–π–ª —Å .txt —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º</b>')
